<?php

namespace Container2Oo3MLt;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMonolog_Logger_MessengerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'monolog.logger.messenger' shared service.
     *
     * @return \Monolog\Logger
     */
    public static function do($container, $lazyLoad = true)
    {
        $container->privates['monolog.logger.messenger'] = $instance = new \Monolog\Logger('messenger');

        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.emergency_file'] ?? self::getMonolog_Handler_EmergencyFileService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.alert_file'] ?? self::getMonolog_Handler_AlertFileService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.critical_file'] ?? self::getMonolog_Handler_CriticalFileService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.error_file'] ?? self::getMonolog_Handler_ErrorFileService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.warning_file'] ?? self::getMonolog_Handler_WarningFileService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.notice_file'] ?? self::getMonolog_Handler_NoticeFileService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.info_file'] ?? self::getMonolog_Handler_InfoFileService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.debug_file'] ?? self::getMonolog_Handler_DebugFileService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));

        return $instance;
    }
}
