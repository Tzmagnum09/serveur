<?php

namespace Container2Oo3MLt;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getServicesResetterService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'services_resetter' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/DependencyInjection/ServicesResetter.php';

        return $container->services['services_resetter'] = new \Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter(new RewindableGenerator(function () use ($container) {
            if (isset($container->services['request_stack'])) {
                yield 'request_stack' => ($container->services['request_stack'] ?? null);
            }
            if (isset($container->privates['container.env_var_processor'])) {
                yield 'container.env_var_processor' => ($container->privates['container.env_var_processor'] ?? null);
            }
            if (isset($container->services['cache.app'])) {
                yield 'cache.app' => ($container->services['cache.app'] ?? null);
            }
            if (isset($container->services['cache.system'])) {
                yield 'cache.system' => ($container->services['cache.system'] ?? null);
            }
            if (false) {
                yield 'cache.validator' => null;
            }
            if (false) {
                yield 'cache.serializer' => null;
            }
            if (false) {
                yield 'cache.property_info' => null;
            }
            if (isset($container->privates['cache.messenger.restart_workers_signal'])) {
                yield 'cache.messenger.restart_workers_signal' => ($container->privates['cache.messenger.restart_workers_signal'] ?? null);
            }
            if (isset($container->privates['mailer.message_logger_listener'])) {
                yield 'mailer.message_logger_listener' => ($container->privates['mailer.message_logger_listener'] ?? null);
            }
            if (isset($container->privates['translation.locale_switcher'])) {
                yield 'translation.locale_switcher' => ($container->privates['translation.locale_switcher'] ?? null);
            }
            if (isset($container->services['debug.stopwatch'])) {
                yield 'debug.stopwatch' => ($container->services['debug.stopwatch'] ?? null);
            }
            if (isset($container->services['event_dispatcher'])) {
                yield 'debug.event_dispatcher' => ($container->services['event_dispatcher'] ?? null);
            }
            if (false) {
                yield 'debug.log_processor' => null;
            }
            if (isset($container->privates['session_listener'])) {
                yield 'session_listener' => ($container->privates['session_listener'] ?? null);
            }
            if (isset($container->privates['form.choice_list_factory.cached'])) {
                yield 'form.choice_list_factory.cached' => ($container->privates['form.choice_list_factory.cached'] ?? null);
            }
            if (isset($container->services['cache.validator_expression_language'])) {
                yield 'cache.validator_expression_language' => ($container->services['cache.validator_expression_language'] ?? null);
            }
            if (isset($container->privates['messenger.transport.in_memory.factory'])) {
                yield 'messenger.transport.in_memory.factory' => ($container->privates['messenger.transport.in_memory.factory'] ?? null);
            }
            if (isset($container->privates['security.token_storage'])) {
                yield 'security.token_storage' => ($container->privates['security.token_storage'] ?? null);
            }
            if (false) {
                yield 'cache.security_expression_language' => null;
            }
            if (isset($container->services['cache.security_is_granted_attribute_expression_language'])) {
                yield 'cache.security_is_granted_attribute_expression_language' => ($container->services['cache.security_is_granted_attribute_expression_language'] ?? null);
            }
            if (isset($container->services['cache.security_is_csrf_token_valid_attribute_expression_language'])) {
                yield 'cache.security_is_csrf_token_valid_attribute_expression_language' => ($container->services['cache.security_is_csrf_token_valid_attribute_expression_language'] ?? null);
            }
            if (isset($container->privates['debug.security.firewall'])) {
                yield 'debug.security.firewall' => ($container->privates['debug.security.firewall'] ?? null);
            }
            if (false) {
                yield 'cache.security_token_verifier' => null;
            }
            if (isset($container->privates['debug.security.firewall.authenticator.main'])) {
                yield 'debug.security.firewall.authenticator.main' => ($container->privates['debug.security.firewall.authenticator.main'] ?? null);
            }
            if (isset($container->services['doctrine'])) {
                yield 'doctrine' => ($container->services['doctrine'] ?? null);
            }
            if (isset($container->privates['doctrine.debug_data_holder'])) {
                yield 'doctrine.debug_data_holder' => ($container->privates['doctrine.debug_data_holder'] ?? null);
            }
            if (isset($container->privates['form.type.entity'])) {
                yield 'form.type.entity' => ($container->privates['form.type.entity'] ?? null);
            }
            if (isset($container->privates['twig'])) {
                yield 'twig' => ($container->privates['twig'] ?? null);
            }
            if (isset($container->privates['twig.form.engine'])) {
                yield 'twig.form.engine' => ($container->privates['twig.form.engine'] ?? null);
            }
            if (isset($container->privates['webpack_encore.tag_renderer'])) {
                yield 'webpack_encore.tag_renderer' => ($container->privates['webpack_encore.tag_renderer'] ?? null);
            }
            if (false) {
                yield 'cache.webpack_encore' => null;
            }
            if (isset($container->privates['webpack_encore.entrypoint_lookup[_default]'])) {
                yield 'webpack_encore.entrypoint_lookup[_default]' => ($container->privates['webpack_encore.entrypoint_lookup[_default]'] ?? null);
            }
            if (isset($container->privates['monolog.handler.main'])) {
                yield 'monolog.handler.main' => ($container->privates['monolog.handler.main'] ?? null);
            }
            if (isset($container->privates['monolog.handler.debug_file'])) {
                yield 'monolog.handler.debug_file' => ($container->privates['monolog.handler.debug_file'] ?? null);
            }
            if (isset($container->privates['monolog.handler.info_file'])) {
                yield 'monolog.handler.info_file' => ($container->privates['monolog.handler.info_file'] ?? null);
            }
            if (isset($container->privates['monolog.handler.notice_file'])) {
                yield 'monolog.handler.notice_file' => ($container->privates['monolog.handler.notice_file'] ?? null);
            }
            if (isset($container->privates['monolog.handler.warning_file'])) {
                yield 'monolog.handler.warning_file' => ($container->privates['monolog.handler.warning_file'] ?? null);
            }
            if (isset($container->privates['monolog.handler.error_file'])) {
                yield 'monolog.handler.error_file' => ($container->privates['monolog.handler.error_file'] ?? null);
            }
            if (isset($container->privates['monolog.handler.critical_file'])) {
                yield 'monolog.handler.critical_file' => ($container->privates['monolog.handler.critical_file'] ?? null);
            }
            if (isset($container->privates['monolog.handler.alert_file'])) {
                yield 'monolog.handler.alert_file' => ($container->privates['monolog.handler.alert_file'] ?? null);
            }
            if (isset($container->privates['monolog.handler.emergency_file'])) {
                yield 'monolog.handler.emergency_file' => ($container->privates['monolog.handler.emergency_file'] ?? null);
            }
            if (isset($container->privates['monolog.handler.doctrine_file'])) {
                yield 'monolog.handler.doctrine_file' => ($container->privates['monolog.handler.doctrine_file'] ?? null);
            }
            if (isset($container->privates['monolog.handler.deprecation_file'])) {
                yield 'monolog.handler.deprecation_file' => ($container->privates['monolog.handler.deprecation_file'] ?? null);
            }
            if (isset($container->privates['monolog.handler.console'])) {
                yield 'monolog.handler.console' => ($container->privates['monolog.handler.console'] ?? null);
            }
            if (isset($container->privates['debug.security.event_dispatcher.main'])) {
                yield 'debug.security.event_dispatcher.main' => ($container->privates['debug.security.event_dispatcher.main'] ?? null);
            }
        }, fn () => 0 + (int) (isset($container->services['request_stack'])) + (int) (isset($container->privates['container.env_var_processor'])) + (int) (isset($container->services['cache.app'])) + (int) (isset($container->services['cache.system'])) + (int) (false) + (int) (false) + (int) (false) + (int) (isset($container->privates['cache.messenger.restart_workers_signal'])) + (int) (isset($container->privates['mailer.message_logger_listener'])) + (int) (isset($container->privates['translation.locale_switcher'])) + (int) (isset($container->services['debug.stopwatch'])) + (int) (isset($container->services['event_dispatcher'])) + (int) (false) + (int) (isset($container->privates['session_listener'])) + (int) (isset($container->privates['form.choice_list_factory.cached'])) + (int) (isset($container->services['cache.validator_expression_language'])) + (int) (isset($container->privates['messenger.transport.in_memory.factory'])) + (int) (isset($container->privates['security.token_storage'])) + (int) (false) + (int) (isset($container->services['cache.security_is_granted_attribute_expression_language'])) + (int) (isset($container->services['cache.security_is_csrf_token_valid_attribute_expression_language'])) + (int) (isset($container->privates['debug.security.firewall'])) + (int) (false) + (int) (isset($container->privates['debug.security.firewall.authenticator.main'])) + (int) (isset($container->services['doctrine'])) + (int) (isset($container->privates['doctrine.debug_data_holder'])) + (int) (isset($container->privates['form.type.entity'])) + (int) (isset($container->privates['twig'])) + (int) (isset($container->privates['twig.form.engine'])) + (int) (isset($container->privates['webpack_encore.tag_renderer'])) + (int) (false) + (int) (isset($container->privates['webpack_encore.entrypoint_lookup[_default]'])) + (int) (isset($container->privates['monolog.handler.main'])) + (int) (isset($container->privates['monolog.handler.debug_file'])) + (int) (isset($container->privates['monolog.handler.info_file'])) + (int) (isset($container->privates['monolog.handler.notice_file'])) + (int) (isset($container->privates['monolog.handler.warning_file'])) + (int) (isset($container->privates['monolog.handler.error_file'])) + (int) (isset($container->privates['monolog.handler.critical_file'])) + (int) (isset($container->privates['monolog.handler.alert_file'])) + (int) (isset($container->privates['monolog.handler.emergency_file'])) + (int) (isset($container->privates['monolog.handler.doctrine_file'])) + (int) (isset($container->privates['monolog.handler.deprecation_file'])) + (int) (isset($container->privates['monolog.handler.console'])) + (int) (isset($container->privates['debug.security.event_dispatcher.main']))), ['request_stack' => ['?resetRequestFormats'], 'container.env_var_processor' => ['reset'], 'cache.app' => ['reset'], 'cache.system' => ['reset'], 'cache.validator' => ['reset'], 'cache.serializer' => ['reset'], 'cache.property_info' => ['reset'], 'cache.messenger.restart_workers_signal' => ['reset'], 'mailer.message_logger_listener' => ['reset'], 'translation.locale_switcher' => ['reset'], 'debug.stopwatch' => ['reset'], 'debug.event_dispatcher' => ['reset'], 'debug.log_processor' => ['reset'], 'session_listener' => ['reset'], 'form.choice_list_factory.cached' => ['reset'], 'cache.validator_expression_language' => ['reset'], 'messenger.transport.in_memory.factory' => ['reset'], 'security.token_storage' => ['disableUsageTracking', 'setToken'], 'cache.security_expression_language' => ['reset'], 'cache.security_is_granted_attribute_expression_language' => ['reset'], 'cache.security_is_csrf_token_valid_attribute_expression_language' => ['reset'], 'debug.security.firewall' => ['reset'], 'cache.security_token_verifier' => ['reset'], 'debug.security.firewall.authenticator.main' => ['reset'], 'doctrine' => ['reset'], 'doctrine.debug_data_holder' => ['reset'], 'form.type.entity' => ['reset'], 'twig' => ['resetGlobals'], 'twig.form.engine' => ['reset'], 'webpack_encore.tag_renderer' => ['reset'], 'cache.webpack_encore' => ['reset'], 'webpack_encore.entrypoint_lookup[_default]' => ['reset'], 'monolog.handler.main' => ['reset'], 'monolog.handler.debug_file' => ['reset'], 'monolog.handler.info_file' => ['reset'], 'monolog.handler.notice_file' => ['reset'], 'monolog.handler.warning_file' => ['reset'], 'monolog.handler.error_file' => ['reset'], 'monolog.handler.critical_file' => ['reset'], 'monolog.handler.alert_file' => ['reset'], 'monolog.handler.emergency_file' => ['reset'], 'monolog.handler.doctrine_file' => ['reset'], 'monolog.handler.deprecation_file' => ['reset'], 'monolog.handler.console' => ['reset'], 'debug.security.event_dispatcher.main' => ['reset']]);
    }
}
